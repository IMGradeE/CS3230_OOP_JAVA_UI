/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Final.main;

import org.jetbrains.annotations.NotNull;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import java.util.concurrent.CountDownLatch;

/**
 *
 * @author zycmm
 */
public class MainMenu extends JFrame {

    /**
     * Creates new form MainMenu
     */
    public MainMenu() {
        initComponents();
        setLocationRelativeTo(null);
        parameters = new SimulatorParameters();
        parametersLabel.setText(parameters.toString());

        /* TODO: For the executionPanel, create a titled border with the title "Execution."
            For the resultsPanel, create a titled border with the title "Results."
            Set the created titled borders for the respective panels using setBorder.
         */
        Border border = BorderFactory.createLineBorder(Color.WHITE, 1, true);
        executionPanel.setBorder(BorderFactory.createTitledBorder(border,"Execution", TitledBorder.CENTER,TitledBorder.ABOVE_TOP));
        resultsPanel.setBorder(BorderFactory.createTitledBorder(border,"Results", TitledBorder.CENTER,TitledBorder.ABOVE_TOP));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagePanel1 = new ImagePanel();
        executionPanel = new JPanel();
        runButton = new JButton();
        settingsButton = new JButton();
        parametersLabel = new JLabel();
        simulatorPanel = new SimulatorPanel();
        resultsPanel = new JPanel();
        talentButton = new JButton();
        capitalButton = new JButton();
        topIndividualButton = new JButton();
        talentVsCapitalButton = new JButton();
        capitalVsTalentButton = new JButton();
        MenuBar = new JMenuBar();
        fileMenu = new JMenu();
        editMenu = new JMenu();
        helpMenu = new JMenu();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Talent vs Luck Simulator");
        setBounds(new Rectangle(0, 0, 1024, 768));
        setPreferredSize(new Dimension(800, 480));

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        settingsButton.setText("Settings");
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });

        parametersLabel.setText("jLabel1");

        GroupLayout executionPanelLayout = new GroupLayout(executionPanel);
        executionPanel.setLayout(executionPanelLayout);
        executionPanelLayout.setHorizontalGroup(
            executionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(executionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(executionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(parametersLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(executionPanelLayout.createSequentialGroup()
                        .addGroup(executionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(runButton, GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                            .addComponent(settingsButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
        );
        executionPanelLayout.setVerticalGroup(
            executionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(executionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(runButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(parametersLabel, GroupLayout.PREFERRED_SIZE, 115, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(137, Short.MAX_VALUE))
        );

        simulatorPanel.setPreferredSize(new Dimension(1024, 625));

        resultsPanel.setName("aaa"); // NOI18N

        talentButton.setText("Talent Distribution");
        talentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                talentButtonActionPerformed(evt);
            }
        });

        capitalButton.setText("Capital Distribution");
        capitalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capitalButtonActionPerformed(evt);
            }
        });

        topIndividualButton.setText("Top Individuals");
        topIndividualButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topIndividualButtonActionPerformed(evt);
            }
        });

        talentVsCapitalButton.setText("Talents vs Capitals");
        talentVsCapitalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                talentVsCapitalButtonActionPerformed(evt);
            }
        });

        capitalVsTalentButton.setText("Capitals vs Talents");
        capitalVsTalentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capitalVsTalentButtonActionPerformed(evt);
            }
        });

        GroupLayout resultsPanelLayout = new GroupLayout(resultsPanel);
        resultsPanel.setLayout(resultsPanelLayout);
        resultsPanelLayout.setHorizontalGroup(
            resultsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(resultsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resultsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(talentVsCapitalButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(capitalVsTalentButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(GroupLayout.Alignment.TRAILING, resultsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(capitalButton))
                    .addGroup(resultsPanelLayout.createSequentialGroup()
                        .addGroup(resultsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(topIndividualButton, GroupLayout.PREFERRED_SIZE, 132, GroupLayout.PREFERRED_SIZE)
                            .addComponent(talentButton, GroupLayout.PREFERRED_SIZE, 132, GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        resultsPanelLayout.setVerticalGroup(
            resultsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(resultsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(topIndividualButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(talentButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(capitalButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(talentVsCapitalButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(capitalVsTalentButton)
                .addContainerGap(79, Short.MAX_VALUE))
        );

        fileMenu.setText("File");
        MenuBar.add(fileMenu);

        editMenu.setText("Edit");
        MenuBar.add(editMenu);

        helpMenu.setText("Help");
        MenuBar.add(helpMenu);

        setJMenuBar(MenuBar);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(executionPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(simulatorPanel, GroupLayout.PREFERRED_SIZE, 402, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resultsPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(simulatorPanel, GroupLayout.PREFERRED_SIZE, 402, GroupLayout.PREFERRED_SIZE)
                    .addComponent(executionPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultsPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        try{
            eventsStart();
        }
        catch (InterruptedException e)
        {
            System.out.println(e.getMessage());
        }

    }//GEN-LAST:event_runButtonActionPerformed

    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed
        SettingsMenu settingsMenu = new SettingsMenu(this, true, parameters);
        settingsMenu.setVisible(true);

        // update SimulatorPanel and parameters label:
        simulatorPanel.setNumberPerson(parameters.getNumberPeople());
        simulatorPanel.setNumberLuckyEvents(parameters.getNumberEvents() / 2);
        simulatorPanel.setNumberUnluckyEvents(parameters.getNumberEvents() - parameters.getNumberEvents() / 2);
        simulatorPanel.setEventComponent(new EventComponent(simulatorPanel.getNumberLuckyEvents(), simulatorPanel.getNumberUnluckyEvents()));
        simulatorPanel.setPersonComponent(new PersonComponent(simulatorPanel.getNumberPerson()));
        simulatorPanel.paintComponent(simulatorPanel.getGraphics());
        parametersLabel.setText(parameters.toString());

    }//GEN-LAST:event_settingsButtonActionPerformed

    private void talentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_talentButtonActionPerformed
        ArrayList<Person> people = simulatorPanel.getPersonComponent().getPeople();
        ArrayList<Double> values = new ArrayList<>();
        for(Person person : people)
        {
            values.add(person.getTalent());
        }

        // Create the dataset
        DefaultCategoryDataset dataset = ValueDistributionHistogram.createDataset(values, 30, 1.0);

        // Create the chart
        JFreeChart chart = ValueDistributionHistogram.createBarChart(dataset);

        /* TODO: Utilize the provided CapitalBarChartMenu class to create an interactive menu with a bar chart.
            Set the layout of the menu to BorderLayout.
            Create a ChartPanel (chartPanel) using the provided chart object.
            Add the chartPanel to the menu at the BorderLayout.CENTER position.
            Set the location of the menu relative to the parent component using menu.setLocationRelativeTo(this).
            Make the menu visible
         */
        CapitalBarChartMenu menu = getCapitalBarChartMenu();
        menu.setLayout(new BorderLayout());
        ChartPanel chartPanel = new ChartPanel(chart);
        menu.add(chartPanel, BorderLayout.CENTER);
        menu.setLocationRelativeTo(this);
        menu.setVisible(true);
    }//GEN-LAST:event_talentButtonActionPerformed

    private void capitalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capitalButtonActionPerformed
        ArrayList<Person> people = simulatorPanel.getPersonComponent().getPeople();
        ArrayList<Double> values = new ArrayList<>();
        for(Person person : people)
        {
            values.add(person.getCapital());
        }

        System.out.println(Collections.max(values));
        // Create the dataset
        DefaultCategoryDataset dataset = ValueDistributionLogScale.createDataset(values, 100, Collections.max(values));

        // Create the chart
        JFreeChart chart = ValueDistributionLogScale.createBarChart(dataset);

        /* TODO: Create a chart panel to display the chart:
            Utilize the provided CapitalBarChartMenu class to create an interactive menu with a bar chart.
            Set the layout of the menu to BorderLayout.
            Create a ChartPanel (chartPanel) using the provided chart object.
            Add the chartPanel to the menu at the BorderLayout.CENTER position.
            Set the location of the menu relative to the parent component using menu.setLocationRelativeTo(this).
            Make the menu visible
         */

        CapitalBarChartMenu menu = getCapitalBarChartMenu();
        menu.setLayout(new BorderLayout());
        ChartPanel chartPanel = new ChartPanel(chart);
        menu.add(chartPanel, BorderLayout.CENTER);
        menu.setLocationRelativeTo(this);
        menu.setVisible(true);

    }//GEN-LAST:event_capitalButtonActionPerformed

    private void topIndividualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topIndividualButtonActionPerformed
        ArrayList<Person> people = simulatorPanel.getPersonComponent().getPeople();
        ArrayList<Double> values = new ArrayList<>();
        for(Person person : people)
        {
            values.add(person.getCapital());
        }
        TopIndividualsMenu menu = new TopIndividualsMenu(this, true, values);


        menu.setVisible(true);
    }//GEN-LAST:event_topIndividualButtonActionPerformed

    private void talentVsCapitalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_talentVsCapitalButtonActionPerformed
        JFreeChart chart = TalentVsCapitalBarChart.createChart(TalentVsCapitalBarChart.createDataset(simulatorPanel.getPersonComponent().getPeople()));

        /* TODO: Utilize the provided TalentVsCapitalBarChartMenu class to create an interactive menu with a bar chart.
            Set the layout of the menu to BorderLayout.
            Create a ChartPanel (chartPanel) using the provided chart object.
            Set the preferred dimensions for the chartPanel to 800 pixels width and 600 pixels height.
            Add the chartPanel to the menu at the BorderLayout.CENTER position.
            Set the location of the menu relative to the parent component using menu.setLocationRelativeTo(this).
            Make the menu visible.
         */

        CapitalBarChartMenu menu = getCapitalBarChartMenu();
        menu.setLayout(new BorderLayout());
        ChartPanel chartPanel = new ChartPanel(chart);
        menu.add(chartPanel, BorderLayout.CENTER);
        menu.setLocationRelativeTo(this);
        menu.setVisible(true);

    }//GEN-LAST:event_talentVsCapitalButtonActionPerformed

    private @NotNull CapitalBarChartMenu getCapitalBarChartMenu() {
        CapitalBarChartMenu menu = new CapitalBarChartMenu((Frame) this, false);
        return menu;
    }

    void capitalVsTalentButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_capitalVsTalentButtonActionPerformed
        JFreeChart chart = CapitalVsTalentBarChart.createChart(CapitalVsTalentBarChart.createDataset(simulatorPanel.getPersonComponent().getPeople()));

        /* TODO: Utilize the provided menu object to create an interactive menu displaying a chart.
            Set the layout of the menu to BorderLayout.
            Create a ChartPanel (chartPanel) using the provided chart object.
            Set the preferred dimensions for the chartPanel to 800 pixels width and 600 pixels height.
            Add the chartPanel to the menu at the BorderLayout.CENTER position.
            Set the location of the menu relative to the parent component using menu.setLocationRelativeTo(this).
            Make the menu visible.

         */
        CapitalBarChartMenu menu = getCapitalBarChartMenu();
        menu.setLayout(new BorderLayout());
        ChartPanel chartPanel = new ChartPanel(chart);
        menu.add(chartPanel, BorderLayout.CENTER);
        menu.setLocationRelativeTo(this);
        menu.setVisible(true);


    }//GEN-LAST:event_capitalVsTalentButtonActionPerformed

    public void eventsStart() throws InterruptedException {
        EventComponent eventComponent = simulatorPanel.getEventComponent();
        PersonComponent personComponent = simulatorPanel.getPersonComponent();
        ArrayList<Event> events = eventComponent.getEvents();


        // 80 steps means a simulation of 40 years, each step represents six month of time
        final int STEPS = parameters.getSimulationSteps();
        final int delay = parameters.getDelayTime();
        for (int i = 0; i < STEPS; i++)
        {
            CountDownLatch start = new CountDownLatch(1);
            CountDownLatch finish = new CountDownLatch(events.size());

            /* TODO: Your task is to complete the implementation of the eventsStart method, ensuring proper
                synchronization and updating of the simulation components. In a for-loop, create an EventRunnable object
                and assign it to a thread, then start the thread.
             */
            for (Event e: events) {
                Thread t = new Thread(new EventRunnable(e, eventComponent, start, finish, delay));
                t.start();
            }
            // After events finish moving, update the simulatorPanel and update people's capitals
            start.countDown();  // let all threads proceed
            finish.await();     // wait for all to finish
            simulatorPanel.paintComponent(simulatorPanel.getGraphics());
            updatePeopleCapitals(eventComponent, personComponent);

        }
    }

    private void updatePeopleCapitals(EventComponent eventComponent, PersonComponent personComponent) {
        ArrayList<Person> people = personComponent.getPeople();
        ArrayList<Final.main.Event> events = eventComponent.getEvents();
        Random random = new Random();

        // Generate a random double value between 0 (inclusive) and 1 (exclusive)
        // double randomValue = random.nextDouble();

        for (Final.main.Event event : events) {
            double eventX = event.getX();
            double eventY = event.getY();
            for (Person person : people) {
                double personX = person.getX();
                double personY = person.getY();
                double distance = calculateDistance(eventX, eventY, personX, personY);
                if (distance <= parameters.getDistanceThreshold()) {
                    if (event.getType() == EventType.UNLUCKY) {
                        person.setCapital(person.getCapital() / 2);
                    } else {
                        // person doubles her capital/success with a probability proportional to her talent
                        if (random.nextDouble() < person.getTalent()) {
                            person.setCapital(person.getCapital() * 2);
                        }
                    }
                    //System.out.println("person: " + personX + ", " + personY + ", capitol = " + person.getCapital());

                }
            }
        }
    }

    private double calculateDistance(double x1, double y1, double x2, double y2) {
        double deltaX = x1 - x2;
        double deltaY = y1 - y2;
        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    }

    public JButton getRunButton() {
        return runButton;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JMenuBar MenuBar;
    private JButton capitalButton;
    private JButton capitalVsTalentButton;
    private JMenu editMenu;
    private JPanel executionPanel;
    private JMenu fileMenu;
    private JMenu helpMenu;
    private ImagePanel imagePanel1;
    private JLabel parametersLabel;
    private JPanel resultsPanel;
    private JButton runButton;
    private JButton settingsButton;
    private SimulatorPanel simulatorPanel;
    private JButton talentButton;
    private JButton talentVsCapitalButton;
    private JButton topIndividualButton;
    // End of variables declaration//GEN-END:variables

    // manually-defined variables
    private SimulatorParameters parameters;

}
