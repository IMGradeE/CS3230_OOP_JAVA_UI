/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Final.main;

import javax.swing.*;

/**
 *
 * @author zycmm
 */
public class SettingsMenu extends JDialog {

    /**
     * Creates new form SettingsMenu
     */
    public SettingsMenu(java.awt.Frame parent, boolean modal, SimulatorParameters parameters) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        this.parameters = parameters;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        numberPeopleLabel = new JLabel();
        numberPeopleTextField = new JTextField();
        numberEventLabel = new JLabel();
        numberEventTextField = new JTextField();
        stepsLabel = new JLabel();
        stepsTextField = new JTextField();
        thresholdLabel = new JLabel();
        thresholdComboBox = new JComboBox<>();
        delayLabel = new JLabel();
        delayTextField = new JTextField();
        okButton = new JButton();
        cancelButton = new JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Settings Menu");
        getContentPane().setLayout(new java.awt.GridLayout(6, 2, 5, 5));

        numberPeopleLabel.setText("Number of People:");
        getContentPane().add(numberPeopleLabel);

        numberPeopleTextField.setText("1000");
        getContentPane().add(numberPeopleTextField);

        numberEventLabel.setText("Number of Events:");
        getContentPane().add(numberEventLabel);

        numberEventTextField.setText("500");
        getContentPane().add(numberEventTextField);

        stepsLabel.setText("Simulation Steps:");
        getContentPane().add(stepsLabel);

        stepsTextField.setText("80");
        getContentPane().add(stepsTextField);

        thresholdLabel.setText("Distance Threshold:");
        getContentPane().add(thresholdLabel);

        thresholdComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5" }));
        thresholdComboBox.setSelectedIndex(1);
        getContentPane().add(thresholdComboBox);

        delayLabel.setText("Thread Delay Time:");
        getContentPane().add(delayLabel);

        delayTextField.setText("50");
        getContentPane().add(delayTextField);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        getContentPane().add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        getContentPane().add(cancelButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        StringBuilder warnings = new StringBuilder();
        int numberPeople = 0;
        int numberEvents = 0;
        int steps = 0;
        double threshold = 0;
        int delay = 0;

        // verify number of people field
        if(numberPeopleTextField.getText().isEmpty())
        {
            warnings.append("Number of People field must not be empty.\n");
        }
        else
        {
            try{
                numberPeople = Integer.parseInt(numberPeopleTextField.getText());
            }
            catch (NumberFormatException e)
            {
                warnings.append("Number of People must be an integer number.\n");
            }
        }

        // verify number of events field
        if(numberEventTextField.getText().isEmpty())
        {
            warnings.append("Number of Event field must not be empty.\n");
        }
        else
        {
            try{
                numberEvents = Integer.parseInt(numberEventTextField.getText());
            }
            catch (NumberFormatException e)
            {
                warnings.append("Number of Events must be an integer number.\n");
            }
        }

        // verify steps field
        if(stepsTextField.getText().isEmpty())
        {
            warnings.append("Simulation Steps must not be empty.\n");
        }
        else
        {
            try{
                steps = Integer.parseInt(stepsTextField.getText());
            }
            catch (NumberFormatException e)
            {
                warnings.append("Simulation Steps must be an integer number.\n");
            }
        }

        // verify thread delay field
        if(delayTextField.getText().isEmpty())
        {
            warnings.append("Thread Delay Time must not be empty.\n");
        }
        else
        {
            try{
                delay = Integer.parseInt(delayTextField.getText());
            }
            catch (NumberFormatException e)
            {
                warnings.append("Thread Delay Time must be an integer number.\n");
            }
        }

        if (warnings.length() > 0) {
            JOptionPane.showMessageDialog(this, warnings.toString(), "Setting Warnings", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            parameters.setNumberPeople(numberPeople);
            parameters.setNumberEvents(numberEvents);
            parameters.setSimulationSteps(steps);
            parameters.setDelayTime(delay);
            threshold = Integer.parseInt(thresholdComboBox.getSelectedItem().toString());
            parameters.setDistanceThreshold(threshold);
            dispose();
        }


    }//GEN-LAST:event_okButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton cancelButton;
    private JLabel delayLabel;
    private JTextField delayTextField;
    private JLabel numberEventLabel;
    private JTextField numberEventTextField;
    private JLabel numberPeopleLabel;
    private JTextField numberPeopleTextField;
    private JButton okButton;
    private JLabel stepsLabel;
    private JTextField stepsTextField;
    private JComboBox<String> thresholdComboBox;
    private JLabel thresholdLabel;
    // End of variables declaration//GEN-END:variables

    // manually-defined variables
    private SimulatorParameters parameters;

}
